// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: wallet-center.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NecoWalletCenterClient is the client API for NecoWalletCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NecoWalletCenterClient interface {
	UpdateUserERC20Wallet(ctx context.Context, in *UpdateUserERC20WalletRequest, opts ...grpc.CallOption) (*UpdateUserERC20WalletResponse, error)
	UpdateUserERC1155Wallet(ctx context.Context, in *UpdateUserERC1155WalletRequest, opts ...grpc.CallOption) (*UpdateUserERC1155WalletResponse, error)
	GetUserERC20Wallet(ctx context.Context, in *GetUserERC20WalletRequest, opts ...grpc.CallOption) (*GetUserERC20WalletResponse, error)
	GetUserERC1155Wallet(ctx context.Context, in *GetUserERC1155WalletRequest, opts ...grpc.CallOption) (*GetUserERC1155WalletResponse, error)
}

type necoWalletCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewNecoWalletCenterClient(cc grpc.ClientConnInterface) NecoWalletCenterClient {
	return &necoWalletCenterClient{cc}
}

func (c *necoWalletCenterClient) UpdateUserERC20Wallet(ctx context.Context, in *UpdateUserERC20WalletRequest, opts ...grpc.CallOption) (*UpdateUserERC20WalletResponse, error) {
	out := new(UpdateUserERC20WalletResponse)
	err := c.cc.Invoke(ctx, "/NecoWalletCenter/UpdateUserERC20Wallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *necoWalletCenterClient) UpdateUserERC1155Wallet(ctx context.Context, in *UpdateUserERC1155WalletRequest, opts ...grpc.CallOption) (*UpdateUserERC1155WalletResponse, error) {
	out := new(UpdateUserERC1155WalletResponse)
	err := c.cc.Invoke(ctx, "/NecoWalletCenter/UpdateUserERC1155Wallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *necoWalletCenterClient) GetUserERC20Wallet(ctx context.Context, in *GetUserERC20WalletRequest, opts ...grpc.CallOption) (*GetUserERC20WalletResponse, error) {
	out := new(GetUserERC20WalletResponse)
	err := c.cc.Invoke(ctx, "/NecoWalletCenter/GetUserERC20Wallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *necoWalletCenterClient) GetUserERC1155Wallet(ctx context.Context, in *GetUserERC1155WalletRequest, opts ...grpc.CallOption) (*GetUserERC1155WalletResponse, error) {
	out := new(GetUserERC1155WalletResponse)
	err := c.cc.Invoke(ctx, "/NecoWalletCenter/GetUserERC1155Wallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NecoWalletCenterServer is the server API for NecoWalletCenter service.
// All implementations must embed UnimplementedNecoWalletCenterServer
// for forward compatibility
type NecoWalletCenterServer interface {
	UpdateUserERC20Wallet(context.Context, *UpdateUserERC20WalletRequest) (*UpdateUserERC20WalletResponse, error)
	UpdateUserERC1155Wallet(context.Context, *UpdateUserERC1155WalletRequest) (*UpdateUserERC1155WalletResponse, error)
	GetUserERC20Wallet(context.Context, *GetUserERC20WalletRequest) (*GetUserERC20WalletResponse, error)
	GetUserERC1155Wallet(context.Context, *GetUserERC1155WalletRequest) (*GetUserERC1155WalletResponse, error)
	mustEmbedUnimplementedNecoWalletCenterServer()
}

// UnimplementedNecoWalletCenterServer must be embedded to have forward compatible implementations.
type UnimplementedNecoWalletCenterServer struct {
}

func (UnimplementedNecoWalletCenterServer) UpdateUserERC20Wallet(context.Context, *UpdateUserERC20WalletRequest) (*UpdateUserERC20WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserERC20Wallet not implemented")
}
func (UnimplementedNecoWalletCenterServer) UpdateUserERC1155Wallet(context.Context, *UpdateUserERC1155WalletRequest) (*UpdateUserERC1155WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserERC1155Wallet not implemented")
}
func (UnimplementedNecoWalletCenterServer) GetUserERC20Wallet(context.Context, *GetUserERC20WalletRequest) (*GetUserERC20WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserERC20Wallet not implemented")
}
func (UnimplementedNecoWalletCenterServer) GetUserERC1155Wallet(context.Context, *GetUserERC1155WalletRequest) (*GetUserERC1155WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserERC1155Wallet not implemented")
}
func (UnimplementedNecoWalletCenterServer) mustEmbedUnimplementedNecoWalletCenterServer() {}

// UnsafeNecoWalletCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NecoWalletCenterServer will
// result in compilation errors.
type UnsafeNecoWalletCenterServer interface {
	mustEmbedUnimplementedNecoWalletCenterServer()
}

func RegisterNecoWalletCenterServer(s grpc.ServiceRegistrar, srv NecoWalletCenterServer) {
	s.RegisterService(&NecoWalletCenter_ServiceDesc, srv)
}

func _NecoWalletCenter_UpdateUserERC20Wallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserERC20WalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NecoWalletCenterServer).UpdateUserERC20Wallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NecoWalletCenter/UpdateUserERC20Wallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NecoWalletCenterServer).UpdateUserERC20Wallet(ctx, req.(*UpdateUserERC20WalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NecoWalletCenter_UpdateUserERC1155Wallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserERC1155WalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NecoWalletCenterServer).UpdateUserERC1155Wallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NecoWalletCenter/UpdateUserERC1155Wallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NecoWalletCenterServer).UpdateUserERC1155Wallet(ctx, req.(*UpdateUserERC1155WalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NecoWalletCenter_GetUserERC20Wallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserERC20WalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NecoWalletCenterServer).GetUserERC20Wallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NecoWalletCenter/GetUserERC20Wallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NecoWalletCenterServer).GetUserERC20Wallet(ctx, req.(*GetUserERC20WalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NecoWalletCenter_GetUserERC1155Wallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserERC1155WalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NecoWalletCenterServer).GetUserERC1155Wallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NecoWalletCenter/GetUserERC1155Wallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NecoWalletCenterServer).GetUserERC1155Wallet(ctx, req.(*GetUserERC1155WalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NecoWalletCenter_ServiceDesc is the grpc.ServiceDesc for NecoWalletCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NecoWalletCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NecoWalletCenter",
	HandlerType: (*NecoWalletCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserERC20Wallet",
			Handler:    _NecoWalletCenter_UpdateUserERC20Wallet_Handler,
		},
		{
			MethodName: "UpdateUserERC1155Wallet",
			Handler:    _NecoWalletCenter_UpdateUserERC1155Wallet_Handler,
		},
		{
			MethodName: "GetUserERC20Wallet",
			Handler:    _NecoWalletCenter_GetUserERC20Wallet_Handler,
		},
		{
			MethodName: "GetUserERC1155Wallet",
			Handler:    _NecoWalletCenter_GetUserERC1155Wallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet-center.proto",
}
