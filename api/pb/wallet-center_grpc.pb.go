// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: wallet-center.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NecoWalletCenterClient is the client API for NecoWalletCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NecoWalletCenterClient interface {
	UpdateUserWallet(ctx context.Context, in *UpdateUserWalletRequest, opts ...grpc.CallOption) (*UserWallet, error)
	GetUserWallet(ctx context.Context, in *GetUserWalletRequest, opts ...grpc.CallOption) (*UserWallet, error)
}

type necoWalletCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewNecoWalletCenterClient(cc grpc.ClientConnInterface) NecoWalletCenterClient {
	return &necoWalletCenterClient{cc}
}

func (c *necoWalletCenterClient) UpdateUserWallet(ctx context.Context, in *UpdateUserWalletRequest, opts ...grpc.CallOption) (*UserWallet, error) {
	out := new(UserWallet)
	err := c.cc.Invoke(ctx, "/NecoWalletCenter/UpdateUserWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *necoWalletCenterClient) GetUserWallet(ctx context.Context, in *GetUserWalletRequest, opts ...grpc.CallOption) (*UserWallet, error) {
	out := new(UserWallet)
	err := c.cc.Invoke(ctx, "/NecoWalletCenter/GetUserWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NecoWalletCenterServer is the server API for NecoWalletCenter service.
// All implementations must embed UnimplementedNecoWalletCenterServer
// for forward compatibility
type NecoWalletCenterServer interface {
	UpdateUserWallet(context.Context, *UpdateUserWalletRequest) (*UserWallet, error)
	GetUserWallet(context.Context, *GetUserWalletRequest) (*UserWallet, error)
	mustEmbedUnimplementedNecoWalletCenterServer()
}

// UnimplementedNecoWalletCenterServer must be embedded to have forward compatible implementations.
type UnimplementedNecoWalletCenterServer struct {
}

func (UnimplementedNecoWalletCenterServer) UpdateUserWallet(context.Context, *UpdateUserWalletRequest) (*UserWallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserWallet not implemented")
}
func (UnimplementedNecoWalletCenterServer) GetUserWallet(context.Context, *GetUserWalletRequest) (*UserWallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWallet not implemented")
}
func (UnimplementedNecoWalletCenterServer) mustEmbedUnimplementedNecoWalletCenterServer() {}

// UnsafeNecoWalletCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NecoWalletCenterServer will
// result in compilation errors.
type UnsafeNecoWalletCenterServer interface {
	mustEmbedUnimplementedNecoWalletCenterServer()
}

func RegisterNecoWalletCenterServer(s grpc.ServiceRegistrar, srv NecoWalletCenterServer) {
	s.RegisterService(&NecoWalletCenter_ServiceDesc, srv)
}

func _NecoWalletCenter_UpdateUserWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NecoWalletCenterServer).UpdateUserWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NecoWalletCenter/UpdateUserWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NecoWalletCenterServer).UpdateUserWallet(ctx, req.(*UpdateUserWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NecoWalletCenter_GetUserWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NecoWalletCenterServer).GetUserWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NecoWalletCenter/GetUserWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NecoWalletCenterServer).GetUserWallet(ctx, req.(*GetUserWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NecoWalletCenter_ServiceDesc is the grpc.ServiceDesc for NecoWalletCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NecoWalletCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NecoWalletCenter",
	HandlerType: (*NecoWalletCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserWallet",
			Handler:    _NecoWalletCenter_UpdateUserWallet_Handler,
		},
		{
			MethodName: "GetUserWallet",
			Handler:    _NecoWalletCenter_GetUserWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet-center.proto",
}
